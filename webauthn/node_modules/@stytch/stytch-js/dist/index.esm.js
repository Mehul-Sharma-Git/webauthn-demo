var PUBLIC_URL = 'https://js.stytch.com/stytch.js';
function getJSUrl() {
    try {
        if (process.env.STYTCH_JS_SDK_URL) {
            return process.env.STYTCH_JS_SDK_URL;
        }
        if (process.env.REACT_APP_STYTCH_JS_SDK_URL) {
            return process.env.REACT_APP_STYTCH_JS_SDK_URL;
        }
        if (process.env.NEXT_PUBLIC_STYTCH_JS_SDK_URL) {
            return process.env.NEXT_PUBLIC_STYTCH_JS_SDK_URL;
        }
        if (process.env.STORYBOOK_STYTCH_JS_SDK_URL) {
            return process.env.STORYBOOK_STYTCH_JS_SDK_URL;
        }
        return PUBLIC_URL;
    }
    catch (err) {
        return PUBLIC_URL;
    }
}
var STYTCH_JS_URL = getJSUrl();

var findOrCreateScript = function () {
    var scripts = document.querySelectorAll("script[src=\"" + STYTCH_JS_URL + "\"]");
    if (scripts[0]) {
        return scripts[0];
    }
    var script = document.createElement('script');
    script.src = STYTCH_JS_URL;
    document.head.appendChild(script);
    return script;
};
var loadScript = function () {
    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
    if (!isBrowser) {
        return Promise.resolve(null);
    }
    return new Promise(function (resolve, reject) {
        if (window.Stytch) {
            console.warn('Stytch.js has already been loaded');
            resolve(window.Stytch);
        }
        var script = findOrCreateScript();
        script.addEventListener('load', function () {
            if (window.Stytch) {
                resolve(window.Stytch);
            }
            else {
                reject(new Error('Stytch.js could not be loaded'));
            }
        });
        script.addEventListener('error', function () {
            reject(new Error('Stytch.js could not be loaded'));
        });
    });
};
// Execute our own script injection after a tick to give users time to do their
// own script injection.
var stytchPromise = Promise.resolve().then(function () { return loadScript(); });
var loadCalled = false;
// We will log a warning if it doesn't look like the host code has checked or invoked the promise
stytchPromise.catch(function (err) {
    if (!loadCalled) {
        console.warn(err);
    }
});
var loadStytch = function () {
    loadCalled = true;
    return stytchPromise;
};

// Callback types
var EventType;
(function (EventType) {
    EventType["CallbackEvent"] = "CALLBACK_EVENT";
    EventType["ErrorEvent"] = "ERROR_EVENT";
    EventType["SuccessEvent"] = "SUCCESS_EVENT";
})(EventType || (EventType = {}));
var CallbackEventType;
(function (CallbackEventType) {
    CallbackEventType["UserEventType"] = "USER_EVENT_TYPE";
})(CallbackEventType || (CallbackEventType = {}));
var SDKProductTypes;
(function (SDKProductTypes) {
    SDKProductTypes["emailMagicLinks"] = "emailMagicLinks";
    SDKProductTypes["oauth"] = "oauth";
})(SDKProductTypes || (SDKProductTypes = {}));
var OAuthProvidersTypes;
(function (OAuthProvidersTypes) {
    OAuthProvidersTypes["Google"] = "google";
    OAuthProvidersTypes["Microsoft"] = "microsoft";
    OAuthProvidersTypes["Apple"] = "apple";
    OAuthProvidersTypes["Github"] = "github";
    OAuthProvidersTypes["Facebook"] = "facebook";
})(OAuthProvidersTypes || (OAuthProvidersTypes = {}));
var OneTapPositions;
(function (OneTapPositions) {
    OneTapPositions["embedded"] = "embedded";
    OneTapPositions["floating"] = "floating";
})(OneTapPositions || (OneTapPositions = {}));

export { CallbackEventType, EventType, OAuthProvidersTypes, OneTapPositions, SDKProductTypes, loadStytch };
//# sourceMappingURL=index.esm.js.map
