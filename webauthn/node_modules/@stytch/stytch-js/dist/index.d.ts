declare global {
    interface Window {
        Stytch?: StytchFactory;
    }
}
type StytchFactory = (publicToken: string, options: CallbackOptions) => StytchClient;
// Client object types
interface StytchClient {
    mount: (mountArgs: StytchMountArgs) => void;
}
interface StytchMountArgs {
    elementId: string;
    loginOrSignupView: LoginOrSignupView;
    style: StyleConfig;
}
interface StyleConfig {
    fontFamily?: string;
    primaryColor?: string;
    primaryTextColor?: string;
    secondaryTextColor?: string;
    lightGrey?: string;
    darkGrey?: string;
    width?: string;
    hideHeaderText?: boolean;
}
interface EmailMagicLinksOptions {
    loginRedirectURL: string;
    loginExpirationMinutes?: number;
    signupRedirectURL: string;
    signupExpirationMinutes?: number;
    createUserAsPending?: boolean;
}
interface LoginOrSignupView {
    products: SDKProductTypes[];
    emailMagicLinksOptions?: EmailMagicLinksOptions;
    oauthOptions?: OAuthOptions;
}
// Callback types
declare enum EventType {
    CallbackEvent = "CALLBACK_EVENT",
    ErrorEvent = "ERROR_EVENT",
    SuccessEvent = "SUCCESS_EVENT"
}
declare enum CallbackEventType {
    UserEventType = "USER_EVENT_TYPE"
}
interface UserEventData {
    type: CallbackEventType.UserEventType;
    email: string;
    emailId: string;
    userId: string;
}
interface MagicLinkSentData {
    message: string;
}
interface StytchError {
    message: string;
}
interface EventData {
    eventType: EventType.CallbackEvent;
    eventData: UserEventData;
}
interface SuccessData {
    eventType: EventType.SuccessEvent;
    eventData: MagicLinkSentData;
}
interface ErrorData {
    eventType: EventType.ErrorEvent;
    error: StytchError;
}
interface CallbackOptions {
    onEvent?: (data: EventData) => void;
    onSuccess?: (data: SuccessData) => void;
    onError?: (data: ErrorData) => void;
}
declare enum SDKProductTypes {
    emailMagicLinks = "emailMagicLinks",
    oauth = "oauth"
}
declare enum OAuthProvidersTypes {
    Google = "google",
    Microsoft = "microsoft",
    Apple = "apple",
    Github = "github",
    Facebook = "facebook"
}
declare enum OneTapPositions {
    embedded = "embedded",
    floating = "floating"
}
type OAuthProvider = {
    type: OAuthProvidersTypes;
} | {
    type: OAuthProvidersTypes.Google;
    one_tap: true;
    position: OneTapPositions;
};
type OAuthOptions = {
    loginRedirectURL?: string;
    signupRedirectURL?: string;
    providers: OAuthProvider[];
};
declare const loadStytch: () => Promise<StytchFactory | null>;
export { loadStytch, StytchFactory, StytchClient, StytchMountArgs, StyleConfig, EmailMagicLinksOptions, LoginOrSignupView, EventType, CallbackEventType, UserEventData, MagicLinkSentData, StytchError, EventData, SuccessData, ErrorData, CallbackOptions, SDKProductTypes, OAuthProvidersTypes, OneTapPositions, OAuthProvider, OAuthOptions };
