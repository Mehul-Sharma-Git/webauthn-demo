import React, {useEffect, useState} from "react";
import {loadStytch, LoginOrSignupView, StyleConfig, CallbackOptions, StytchFactory} from '@stytch/stytch-js'

export {SDKProductTypes, OAuthProvidersTypes} from '@stytch/stytch-js'

export interface StytchProps {
  publicToken: string;
  loginOrSignupView?: LoginOrSignupView;
  style?: StyleConfig;
  callbacks?: CallbackOptions;
}

const useStytchFactory = (): StytchFactory => {
  const [stytchFactory, setStytchFactory] = useState<StytchFactory>();
  useEffect(() => {
    // If we pass the function in directly React will execute it as a SetStateAction
    // Need to wrap in an anon - see https://medium.com/swlh/how-to-store-a-function-with-the-usestate-hook-in-react-8a88dd4eede1
    loadStytch().then(globalStytch => setStytchFactory(() => globalStytch))
  }, []);

  return stytchFactory;
}

/**
 * Returns a unique element ID.
 * Client-side only - will return null for server-side
 * resolves: https://stytch.slack.com/archives/C015UDB4X33/p1641450131000800
 * based on: https://github.com/vercel/next.js/issues/7322#issuecomment-968858477
 */
const useUniqueElementId = (): string | null => {
  const [elementId, setElementId] = useState<string | null>(null);
  useEffect(() => {
    const randId = Math.floor(Math.random() * 1e6);
    setElementId(`stytch-magic-link-${randId}`);
  }, [])
  return elementId;
}

/**
 * Stytch JS React Component
 *
 * [Documentation](https://stytch.com/docs/javascript-sdk)
 */
export const Stytch = (props: StytchProps) => {
  const StytchFactory = useStytchFactory();
  const elementId = useUniqueElementId();

  const {publicToken, style, callbacks, loginOrSignupView} = props;

  useEffect(() => {
    if (!StytchFactory || !elementId) {
      return;
    }
    const stytch = StytchFactory(publicToken, callbacks);

    stytch.mount({
      elementId: `#${elementId}`,
      style,
      loginOrSignupView,
    });
  }, [StytchFactory, elementId]);

  return elementId ?
    <div id={elementId}></div> :
    null;
};
